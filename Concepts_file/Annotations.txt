Annotations in Java are special markers or metadata that provide information to the compiler or JVM about the code. They do not change the actual logic, but they help give instructions or add information. They start with the symbol @.
Commonly Used Annotations
1. @Override: Used when a method overrides a method from its parent class.
Helps the compiler check correctness.
Example:
class Parent {
    void show() { }
}
class Child extends Parent {
    @Override
    void show() {System.out.println("Overridden method"); }
}
2. @Deprecated: Marks a method or class as outdated (not recommended to use). The compiler gives a warning if itâ€™s used.
Example:
@Deprecated
void oldMethod() {System.out.println("This method is deprecated");}
3. @SuppressWarnings: Used to ignore compiler warnings for specific code parts.
Example:
@SuppressWarnings("unchecked")
void example() {
    List list = new ArrayList(); // unchecked warning suppressed
    list.add("Hello");
}
4. @SafeVarargs: Used to suppress warnings when using varargs with generics (from Java 7+). It ensures that the method does not perform unsafe operations.
Example:
@SafeVarargs
private final void print(List<String>... lists) {
    for (List<String> list : lists) {System.out.println(list);}
}
5. @FunctionalInterface: Used to mark an interface that has exactly one abstract method (used in Lambda Expressions).
Example:
@FunctionalInterface
interface MyFunction {void display();}
Meta-Annotations: These are annotations that apply to other annotations (used when creating custom annotations).
6. @Target: Specifies where the annotation can be used (e.g., on a method, class, field, etc.).
7. @Retention: Specifies how long the annotation should be retained:
SOURCE: discarded after compilation
CLASS: kept in class file but ignored by JVM
RUNTIME: available at runtime (via reflection)
8. @Documented: Indicates that the annotation should be included in Javadoc.
9. @Inherited: Allows a subclass to inherit an annotation from its superclass.
10. Custom Annotation: You can create your own annotation using @interface.
